#!/bin/bash

SCRIPT="${0}"
SCRIPT_DIR=$(cd $(dirname ${SCRIPT}) && pwd)
. ${SCRIPT_DIR}/_wl_common

ROOM_NAME="${1}"
if [[ -z "${ROOM_NAME}" ]] ; then
  ROOM_NAME="$(cat ${CURRENT_ROOM})"
fi

TILES_JSON_PREFIX="{ \"tiles\": [ "
TILES_JSON_SEP=", "
TILES_JSON_SUFFIX=" ] }"

ACTIVE_CHAR=""
ACTIVE_CHAR_INDEX=1
TILES=()
LETTERS=()
INDEXES=()

function reset_play {
  TILES=()
  LETTERS=()
  INDEXES=()
  ACTIVE_CHAR=""
  ACTIVE_CHAR_INDEX=1
}

function current_word {
  for c in "${LETTERS[@]}" ; do
    echo -n "${c}"
  done
}

function play_obj {
  if [[ ! -z ${CURRENT_PLAY} ]] ; then
    cat <<EOF
  {
    "room": "${ROOM_NAME}",
    "stateChange": "word_played",
    "id": "$(session_player)",
    "clientId": "$(session_player)",
    "apiToken": "$(session_apiToken)",
    "word": "$(current_word)",
    "tiles": ${CURRENT_PLAY}
  }
EOF
  else
    error "no valid word to play"
  fi
}

function board_preview_obj {
  echo -n "${TILES_JSON_PREFIX}"
  first=1
  for tile in "${TILES[@]}" ; do
    if [ $first -ne 1 ] ; then
      echo -n "${TILES_JSON_SEP}"
    fi
    if [[ "${tile}" =~ /null/ ]] ; then
      break
    fi
    echo -n " { ${tile} }"
    first=0
  done
  echo -n "${TILES_JSON_SUFFIX}"
}

X1=${1:-$(cat ${WL_DIR}/rooms/${ROOM_NAME}/x1)}
Y1=${2:-$(cat ${WL_DIR}/rooms/${ROOM_NAME}/x1)}
VIEW_SIZE=${3:-$(cat ${WL_DIR}/rooms/${ROOM_NAME}/view_size)}
board="$(echo "{}" | wl_post "${SESSION_TOKEN}" "${WL_API}/rooms/${ROOM_NAME}/board/preview.txt?x1=${X1}&x2=$(expr ${X1} + ${VIEW_SIZE})&y1=${Y1}&y2=$(expr ${Y1} + ${VIEW_SIZE})")" \
  || die "error previewing board"

printf " $(printf "$(echo ${board} | jq '.grid' | tr -d '"')")"
echo

while IFS= read -s -r -n1 char ; do
  reset=0
  case ${char} in
    [a-zA-z])
      ACTIVE_CHAR="${char}"
      ACTIVE_CHAR_INDEX=1
      for c in "${LETTERS[@]}" ; do
        if [[ ${c} == ${char} ]] ; then
          ACTIVE_CHAR_INDEX=$(expr ${ACTIVE_CHAR_INDEX} + 1)
        fi
      done
      TILES+=("\"symbol\": \"${char}\", \"index\": ${ACTIVE_CHAR_INDEX}")
      LETTERS+=("${char}")
      INDEXES+=(${ACTIVE_CHAR_INDEX})
    ;;
    '>')
      if [[ ${#TILES[@]} -gt 0 ]] ; then
        ACTIVE_CHAR_INDEX=$(expr ${ACTIVE_CHAR_INDEX} + 1)
        unset 'TILES[${#TILES[@]}-1]'
        unset 'INDEXES[${#INDEXES[@]}-1]'
        TILES+=("\"symbol\": \"${LETTERS[-1]}\", \"index\": ${ACTIVE_CHAR_INDEX}")
        INDEXES+=(${ACTIVE_CHAR_INDEX})
      else
        continue
      fi
    ;;
    '<')
      if [[ ${#TILES[@]} -gt 0 ]] ; then
        ACTIVE_CHAR_INDEX=$(expr ${ACTIVE_CHAR_INDEX} - 1)
        if [ ${ACTIVE_CHAR_INDEX} -lt 1 ] ; then
          ACTIVE_CHAR_INDEX=1
        fi
        unset 'TILES[${#TILES[@]}-1]'
        unset 'INDEXES[${#INDEXES[@]}-1]'
        TILES+=("\"symbol\": \"${LETTERS[-1]}\", \"index\": ${ACTIVE_CHAR_INDEX}")
        INDEXES+=(${ACTIVE_CHAR_INDEX})
      else
        continue
      fi
    ;;
    '')
      if [[ -z "${CURRENT_PLAY}" ]] ; then
        error "no current play"
      else
        # todo: make play, show updated board
        reset_play
        reset=1
      fi
    ;;
    '-')
      unset 'TILES[${#TILES[@]}-1]'
      unset 'LETTERS[${#LETTERS[@]}-1]'
      unset 'INDEXES[${#INDEXES[@]}-1]'
      if [[ ${#LETTERS[@]} -gt 0 ]] ; then
        ACTIVE_CHAR="${LETTERS[${#LETTERS[@]}-1]}"
      else
        ACTIVE_CHAR=""
      fi
      if [[ ${#INDEXES[@]} -gt 0 ]] ; then
        ACTIVE_CHAR_INDEX="${INDEXES[${#INDEXES[@]}-1]}"
      else
        ACTIVE_CHAR_INDEX=1
      fi
    ;;
    ' ')
      echo ; echo "reset"
      reset_play
      reset=1
    ;;
    *)
      continue
    ;;
  esac

  if [[ ${reset} -eq 1 ]] ; then
    POST_ENTITY="{}"
    reset=0
  else
    POST_ENTITY="$(board_preview_obj)"
  fi
  board="$(wl_post "${SESSION_TOKEN}" "${WL_API}/rooms/${ROOM_NAME}/board/preview.txt?x1=${X1}&x2=$(expr ${X1} + ${VIEW_SIZE})&y1=${Y1}&y2=$(expr ${Y1} + ${VIEW_SIZE})" "${POST_ENTITY}")" \
    || die "error previewing board"

  echo
  printf " $(printf "$(echo ${board} | jq '.grid' | tr -d '"')")"
  echo ; echo

  echo -n "wordland>>> "
  if [[ ${#TILES[*]} -gt 0 ]] ; then
    echo -n "$(current_word)"

    SUCCESS="$(echo ${board} | jq '.success')"
    if [[ -z "${SUCCESS}" || "${SUCCESS}" != "true" ]] ; then
      error "word cannot be played"
      CURRENT_PLAY=""
    else
      CURRENT_PLAY="$(echo ${board} | jq '.playedTiles')"
    fi

  fi
done
