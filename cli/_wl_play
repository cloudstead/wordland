#!/bin/bash

SCRIPT="${0}"
SCRIPT_DIR=$(cd $(dirname ${SCRIPT}) && pwd)
. ${SCRIPT_DIR}/_wl_play_functions

ROOM_NAME="${1:?$(translate_message err_room_required)}"
WEBSOCKET_PID="${2:?$(translate_message err_websocket_wl_play_pid_required)}"

init_play ${ROOM_NAME}

USE_CACHED_BOARD=0
fresh_board_view

while [ 1 ] ; do
 while IFS= read -s -r -t 2 -n1 char 2> /dev/null ; do
  reset=0
  # debug_tray "before"
  case ${char} in
    # Add a letter to the tray
    [a-zA-z])
      ACTIVE_CHAR="${char}"
      ACTIVE_CHAR_INDEX=1

      existing=()
      i=0
      while [[ ${i} -lt $(current_word_length) ]] ; do
        c="${LETTERS[${i}]}"
        if [[ ${c} == ${char} ]] ; then
          existing+=( ${INDEXES[${i}]} )
        fi
        i=$(expr ${i} + 1)
      done
      # debug "found existing=${existing}"
      i=1
      correctIndex=""
      while [[ -z "${correctIndex}" ]] ; do
        if [[ $(printf '%s\n' "${existing[@]}" | grep ${i} | wc -l | tr -d ' ') -eq 0 ]] ; then
          correctIndex=${i}
        fi
        i=$(expr ${i} + 1)
      done
      if [[ ! -z ${correctIndex} ]] ; then
        ACTIVE_CHAR_INDEX=${correctIndex}
        # debug "AZ: correctIndex=${correctIndex}, CWL=$(current_word_length), ATI=${ACTIVE_TRAY_INDEX}"
        if [[ ${#TILES[@]} -gt 0 && ${ACTIVE_TRAY_INDEX} -lt $(current_word_length) ]] ; then
          # shift all other elements forward to make room for new one
          i=${#TILES[@]}
          TILES+=("${TILES[$(expr ${i}-1)]]}")
          LETTERS+=("${LETTERS[$(expr ${i}-1)]]}")
          INDEXES+=("${INDEXES[$(expr ${i}-1)]]}")
          while [[ ${i} -ge ${ACTIVE_TRAY_INDEX} ]] ; do
            TILES[${i}]="${TILES[$(expr ${i}-1)]}"
            LETTERS[${i}]="${LETTERS[$(expr ${i}-1)]}"
            INDEXES[${i}]="${INDEXES[$(expr ${i}-1)]}"
            i=$(expr ${i} - 1)
          done
          # debug "AZ: adding letter in middle: ${ACTIVE_TRAY_INDEX}"
          TILES[${ACTIVE_TRAY_INDEX}-1]="\"symbol\": \"${char}\", \"index\": ${ACTIVE_CHAR_INDEX}"
          LETTERS[${ACTIVE_TRAY_INDEX}-1]="${char}"
          INDEXES[${ACTIVE_TRAY_INDEX}-1]=${ACTIVE_CHAR_INDEX}
        else
          # add element at the end
          # debug "AZ: adding letter at end"
          TILES+=("\"symbol\": \"${char}\", \"index\": ${ACTIVE_CHAR_INDEX}")
          LETTERS+=("${char}")
          INDEXES+=(${ACTIVE_CHAR_INDEX})
          ACTIVE_TRAY_INDEX=$(expr ${ACTIVE_TRAY_INDEX} + 1)
        fi
        if [[ ${ACTIVE_TRAY_INDEX} -ge $(current_word_length) ]] ; then
          ACTIVE_TRAY_INDEX=$(current_word_length)
        fi
      else
        continue
      fi
    ;;

    # Increment current active char index
    '>')
      # debug "> start: ATI=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, ACI=${ACTIVE_CHAR_INDEX}, #TILES[@]=${#TILES[@]}"
      if [[ ${#TILES[@]} -gt 0 ]] ; then
        existing=()
        i=0
        while [[ ${i} -lt $(current_word_length) ]] ; do
          c="${LETTERS[${i}]}"
          if [[ ${c} == ${ACTIVE_CHAR} ]] ; then
            existing+=( ${INDEXES[${i}]} )
          fi
          i=$(expr ${i} + 1)
        done

        ACTIVE_CHAR_INDEX=$(expr ${ACTIVE_CHAR_INDEX} + 1)
        # debug "> found existing=${existing}"
        i=${ACTIVE_CHAR_INDEX}
        correctIndex=""
        while [[ -z "${correctIndex}" ]] ; do
          if [[ $(printf '%s\n' "${existing[@]}" | grep ${i} | wc -l | tr -d ' ') -eq 0 ]] ; then
            correctIndex=${i}
            break
          fi
          i=$(expr ${i} + 1)
        done
        # debug "> found correctIndex=${correctIndex}"
        if [[ ! -z ${correctIndex} ]] ; then
          ACTIVE_CHAR_INDEX=${correctIndex}
          TILES[${ACTIVE_TRAY_INDEX}-1]="\"symbol\": \"${LETTERS[${ACTIVE_TRAY_INDEX}-1]}\", \"index\": ${ACTIVE_CHAR_INDEX}"
          INDEXES[${ACTIVE_TRAY_INDEX}-1]=${ACTIVE_CHAR_INDEX}
          # debug $(echo "> end: BPO: $(board_preview_obj)" | grep tiles)
        else
          continue
        fi
      else
        continue
      fi
    ;;

    # Decrement current active char index, if possible
    '<')
      # debug "< start: ATI=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, ACI=${ACTIVE_CHAR_INDEX}, #TILES[@]=${#TILES[@]}"
      if [[ ${#TILES[@]} -gt 0 ]] ; then
        ACTIVE_CHAR_INDEX=$(expr ${ACTIVE_CHAR_INDEX} - 1)
        if [ ${ACTIVE_CHAR_INDEX} -lt 1 ] ; then
          ACTIVE_CHAR_INDEX=1
        else
          # what is the first available index that is less than the current index?
          existing=()
          i=0
          while [[ ${i} -lt $(current_word_length) ]] ; do
            c="${LETTERS[${i}]}"
            # debug "< comparing letter ${c} to play ${ACTIVE_CHAR}"
            if [[ ${c} == ${ACTIVE_CHAR} ]] ; then
              existing+=( ${INDEXES[${i}]} )
            fi
            i=$(expr ${i} + 1)
          done
          # debug "< found existing=${existing}"
          i=${ACTIVE_CHAR_INDEX}
          correctIndex=""
          while [[ ${i} -gt 0 ]] ; do
            found=0
            if [[ $(printf '%s\n' "${existing[@]}" | grep ${i} | wc -l | tr -d ' ') -eq 0 ]] ; then
              correctIndex=${i}
              break
            fi
            i=$(expr ${i} - 1)
          done
          # debug "< found correctIndex=${correctIndex}"
          if [[ -z ${correctIndex} ]] ; then
            return
          fi
          ACTIVE_CHAR_INDEX=${correctIndex}

          TILES[${ACTIVE_TRAY_INDEX}-1]="\"symbol\": \"${LETTERS[${ACTIVE_TRAY_INDEX}-1]}\", \"index\": ${ACTIVE_CHAR_INDEX}"
          INDEXES[${ACTIVE_TRAY_INDEX}-1]=${ACTIVE_CHAR_INDEX}
        fi
        # debug "< end : ATI=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, ACI=${ACTIVE_CHAR_INDEX}, #TILES[@]=${#TILES[@]}"
        # debug $(echo "> end: BPO: $(board_preview_obj)" | grep tiles)
      else
        continue
      fi
    ;;

    # Move current letter to the right in the tray, if possible
    ']')
      USE_CACHED_BOARD=1
      if [[ ${#TILES[@]} -gt 1 && ${ACTIVE_TRAY_INDEX} -lt $(current_word_length) ]] ; then
        ATR_INDEX=$(expr ${ACTIVE_TRAY_INDEX} - 1)
        next=$(expr ${ATR_INDEX} + 1)
        SAVED_TILE="${TILES[${next}]}"
        SAVED_LETTER="${LETTERS[${next}]}"
        SAVED_INDEX="${INDEXES[${next}]}"
        TILES[${next}]="${TILES[${ATR_INDEX}]}"
        LETTERS[${next}]="${LETTERS[${ATR_INDEX}]}"
        INDEXES[${next}]="${INDEXES[${ATR_INDEX}]}"
        TILES[${ATR_INDEX}]="${SAVED_TILE}"
        LETTERS[${ATR_INDEX}]="${SAVED_LETTER}"
        INDEXES[${ATR_INDEX}]="${SAVED_INDEX}"
        ACTIVE_TRAY_INDEX=$(expr ${ACTIVE_TRAY_INDEX} + 1)
      else
        continue
      fi
    ;;

    # Move current letter to the left in the tray, if possible
    '[')
      USE_CACHED_BOARD=1
      if [[ ${#TILES[@]} -gt 1 && ${ACTIVE_TRAY_INDEX} -gt 1 ]] ; then
        ATR_INDEX=$(expr ${ACTIVE_TRAY_INDEX} - 1)
        prev=$(expr ${ATR_INDEX} - 1)
        SAVED_TILE="${TILES[${prev}]}"
        SAVED_LETTER="${LETTERS[${prev}]}"
        SAVED_INDEX="${INDEXES[${prev}]}"
        TILES[${prev}]="${TILES[${ATR_INDEX}]}"
        LETTERS[${prev}]="${LETTERS[${ATR_INDEX}]}"
        INDEXES[${prev}]="${INDEXES[${ATR_INDEX}]}"
        TILES[${ATR_INDEX}]="${SAVED_TILE}"
        LETTERS[${ATR_INDEX}]="${SAVED_LETTER}"
        INDEXES[${ATR_INDEX}]="${SAVED_INDEX}"
        ACTIVE_TRAY_INDEX=$(expr ${ACTIVE_TRAY_INDEX} - 1)
      else
        continue
      fi
    ;;

    # Change currently active letter in the tray to the right, if possible
    '}')
      USE_CACHED_BOARD=1
      if [[ ${#TILES[@]} -gt 1 && ${ACTIVE_TRAY_INDEX} -lt $(current_word_length) ]] ; then
        ATR_INDEX=$(expr ${ACTIVE_TRAY_INDEX})
        next=$(expr ${ATR_INDEX} + 1)
        ACTIVE_TRAY_INDEX=${next}
        ACTIVE_CHAR="${LETTERS[${ATR_INDEX}]}"
        ACTIVE_CHAR_INDEX="${INDEXES[${ATR_INDEX}]}"
        # debug "} end: ATI=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, ACI=${ACTIVE_CHAR_INDEX}, #TILES[@]=${#TILES[@]}"
      else
        continue
      fi
    ;;

    # Change currently active letter in the tray to the left, if possible
    '{')
      USE_CACHED_BOARD=1
      if [[ ${#TILES[@]} -gt 1 && ${ACTIVE_TRAY_INDEX} -gt 1 ]] ; then
        ATR_INDEX=$(expr ${ACTIVE_TRAY_INDEX} - 1)
        prev=$(expr ${ATR_INDEX} - 1)
        ACTIVE_TRAY_INDEX=${ATR_INDEX}
        ACTIVE_CHAR="${LETTERS[${prev}]}"
        ACTIVE_CHAR_INDEX="${INDEXES[${prev}]}"
        # debug "{ end: ATI=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, ACI=${ACTIVE_CHAR_INDEX}, #TILES[@]=${#TILES[@]}"
      else
        continue
      fi
    ;;

    # Submit the letters in the tray as our play, if there are any
    '')
      if [[ -z "${CURRENT_PLAY}" ]] ; then
        error "$(translate_message err_game_noCurrentPlay)"
      else
        play_status="$(wl_post "${ROOM_API}/play" "$(play_obj)" "${PLAY_JSON}" "200 422")"
        case $(http_code ${play_status}) in
          200)
            reset_play
            reset=1
            play_output=""
          ;;
          422)
            play_output="$(validation_errors "$(cat "${PLAY_JSON}")")"
          ;;
          *)
            play_output="$(translate_message err_api_play)"
          ;;
        esac
      fi
    ;;

    # Remove the most recently added letter from the tray
    '-')
      subtract_letter
    ;;

    # Clear the tray
    ' ')
      echo ; echo "$(translate_message msg_word_reset)"
      reset_play
      reset=1
    ;;

    '?')
      lang_file "help"
    ;;

    '1')
      echo ; echo
      show_plays
    ;;

    '!')
      echo ; echo
      show_plays in_detail
    ;;

    '~')
      echo ; echo
      move_board
    ;;

    '@')
      echo ; echo
      board_image
    ;;

    '/')
      echo ; echo
      show_rooms
    ;;

    '^')
      abandon_game
      ;;

    # Didn't understand that, skip it
    *)
      continue
    ;;
  esac

  # debug_tray "after"

  # Get the board preview
  if [[ ${reset} -eq 1 ]] ; then
    reset=0
  fi
  show_board

  # If the play resulted in a message to the user, show that here
  if [[ ! -z "${play_output}" ]] ; then
    error -n "${play_output}"
    play_output=""
  fi

  # Show the tray
  echo
  show_tray

  echo -n "$(wl_prompt)"

 done

 if [[ -f ${WEBSOCKET_FILE} ]] ; then
   WS_TEMP=${WEBSOCKET_FILE}.$(date +%s).$(uuid | head -c 8).json
   mv ${WEBSOCKET_FILE} ${WS_TEMP}
   async_fresh_board_view ${WS_TEMP}
   rm -f ${WS_TEMP}
 fi
done
