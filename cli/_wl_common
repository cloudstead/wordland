#!/bin/bash

set -e

function die {
  if [[ -z "${SCRIPT}" ]] ; then
    echo 1>&2 "${1}"
  else
    echo 1>&2 "${SCRIPT}: ${1}"
  fi
  exit 1
}

function sign_up {
  USERNAME="${1}"
  ASK_TO_SIGNUP="${2:-Y}"
  OPTIONAL=""
  if [[ -z "${ASK_TO_SIGNUP}" || ${ASK_TO_SIGNUP} == "Y" ]] ; then
  OPTIONAL=" (optional)"
  fi

  echo -n "Your email${OPTIONAL}: "
  read EMAIL

  if [[ ! -z "${EMAIL}" ]] ; then
    if [[ -z "${ASK_TO_SIGNUP}" || ${ASK_TO_SIGNUP} == "Y" ]] ; then
      echo -n "Sign up for an account? [Y/N] (enter Y if you already have an account, you'll be signed in) "
      read SIGN_UP
    else
      SIGN_UP="Y"
    fi
    if [[ ! -z "${SIGN_UP}" && ( "${SIGN_UP}" == "Y" || "${SIGN_UP}" == "y" ) ]] ; then
      # Yes, sign up for an account with email
      echo -n "Password: "
      read -s PASSWORD
      SECRETS=""
      if [ ! -z ${SKIP_CAPTCHA_SECRET} ] ; then
        SECRETS='{ "name": "'${SKIP_CAPTCHA_SECRET}'", "value": "'${SKIP_CAPTCHA_SECERT}'" }'
      fi
      response=$(curl --header "Content-Type: application/json" --silent --write-out "\n%{http_code}\n" -X POST -d '{"username": "'${USERNAME}'", "email": "'${EMAIL}'", "password": "'${PASSWORD}'", "secrets": [ '"${SECRETS}"' ]}' ${WL_API}/auth/register)
      status_code=$(echo "${response}" | sed -n '$p')
      json=$(echo "${response}" | sed '$d')
      if [[ ${status_code} -ne 200 ]] ; then
        die "Error signing up: ${json}"
      fi
      echo "${json}" > ${SESSION_JSON}

    else
      # No don't sign up, use anonymous account with email
      response=$(curl --header "Content-Type: application/json" --silent --write-out "\n%{http_code}\n" -X POST -d '{"username": "'${USERNAME}'", "email": "'${EMAIL}'"}' ${WL_API}/auth/register)
      status_code=$(echo "${response}" | sed -n '$p')
      json=$(echo "${response}" | sed '$d')
      if [[ ${status_code} -ne 200 ]] ; then
        die "Error logging in: ${status_code} / ${json}"
      fi
      echo "${json}" > ${SESSION_JSON}
    fi
  else
    # Can't sign up without email, use anonymous account with username, or no username (one will be assigned)
    response=$(curl --header "Content-Type: application/json" --silent --write-out "\n%{http_code}\n" -X POST -d '{"name": "'${USERNAME}'"}' ${WL_API}/auth/login)
    status_code=$(echo "${response}" | sed -n '$p')
    json=$(echo "${response}" | sed '$d')
    if [[ ${status_code} -ne 200 ]] ; then
      die "Error logging in: ${status_code} / ${json}"
    fi
    echo "${json}" > ${SESSION_JSON}
  fi

}

function get_session_name {
  echo -n "$(cat ${SESSION_JSON} | grep -m 1 '\"name\"' | awk -F '"' '{print $4}' | tr -d ' \n')"
}
function get_session_email {
  echo -n "$(cat ${SESSION_JSON} | grep -m 1 '\"email\"' | awk -F '"' '{print $4}' | tr -d ' \n')"
}

if [ -f ${HOME}/.wordland.env ] ; then
  . ${HOME}/.wordland.env
fi

DEFAULT_API="http://127.0.0.1:9091/api"

if [ -z "${WL_API}" ] ; then
  #die "no WL_API defined"
  #echo "No WL_API defined, using default ${DEFAULT_API}"
  WL_API="${DEFAULT_API}"
fi

WL_DIR="${HOME}/.wordland"
SESSION_JSON="${WL_DIR}/session.json"

if [ ! -f ${SESSION_JSON} ] ; then

  response=$(curl --silent --write-out "\n%{http_code}\n" ${WL_API}/auth)
  status_code=$(echo "$response" | sed -n '$p')
  json=$(echo "$response" | sed '$d')
  if [ -z "${status_code}" ] ; then
    die "error checking session: ${json}"
  fi
  if [ ${status_code} -eq 200 ] ; then
    echo "${json}" > ${SESSION_JSON}

  elif [ ${status_code} -eq 404 ] ; then
    echo -n "Your username (optional): "
    read USERNAME
    sign_up ${USERNAME} "Y"

  else
    die "error checking status: ${status_code} / ${json}"
  fi

fi

WL_API_KEY="x-wordland-api-key"
SESSION_TOKEN="${WL_API_KEY}: $(cat ${SESSION_JSON} | grep apiToken | awk -F '"' '{print $4}')"

function wl_get {
  URL="${1}"
  ERR_MESSAGE="${2:-error}"
  response=$(curl --silent --write-out "\n%{http_code}\n" --header "${SESSION_TOKEN}" ${URL})
  status_code=$(echo "$response" | sed -n '$p')
  json=$(echo "$response" | sed '$d')
  if [ -z "${status_code}" ] ; then
    die "${ERR_MESSAGE}: ${json}"
  fi
  if [ ${status_code} -eq 200 ] ; then
    echo "${json}"
  else
    die "${ERR_MESSAGE}: ${status_code} / ${json}"
  fi
}
