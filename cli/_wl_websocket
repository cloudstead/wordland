#!/bin/bash

SCRIPT="${0}"
SCRIPT_DIR=$(cd $(dirname ${SCRIPT}) && pwd)
. ${SCRIPT_DIR}/_wl_base

WL_PLAY_PID=${1:?$(translate_message err_websocket_no_wl_play_pid)}
WL_SOCKET_PID=$$

function join_obj {
  cat | tr -d '\n' <<EOF
{
 "id": "$(session_player)",
 "clientId": "$(session_player)",
 "apiToken":"$(session_apiToken)",
 "room":"$(current_room)",
 "stateChange":"player_joined"
}
EOF
}

echo "$(join_obj)" | websocat -n ${DEFAULT_WS_API}/$(session_player) | {
  while read -r line ; do
    if [[ ! -z "${WL_SOCKET_LOG}" ]] ; then
      echo "${line}" >> "${WL_SOCKET_LOG}"
    fi

    # skip empty lines
    if [[ -z "${line}" ]] ; then
      continue
    fi

    # unquote, strip leading/trailing quotation marks
    json="$(echo -n "${line}")"
    echo "${json}" >> /tmp/websocket

    # the 'X' message is a websocket heartbeat, ignore it
    if [[ "$(echo "${json}" | tr -d ' \n')" == "X" ]] ; then
      continue
    fi

    # determine room
    room="$(json_val "${json}" room)"
    if [[ -z "${room}" ]] ; then
      # not sure, keep message in unknown_room
      room="unknown_room"
      mkdir -p "$(room_dir ${room})"
    fi

    # do we have room locally?
    ROOM_DIR="$(room_dir ${room})"
    if [[ ! -d ${ROOM_DIR} ]] ; then
      # room no longer exists locally, ignore message
      continue
    fi

    # write to room's websocket file
    WEBSOCKET_FILE="$(room_web_socket ${room})"
    echo "$(echo ${json} | tr -d '\n')" | tee -a ${WEBSOCKET_FILE} > /dev/null
  done
}
