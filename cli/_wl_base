#!/bin/bash

ENV_FILE="${HOME}/.wordland.env"

WL_DIR="${HOME}/.wordland"
SESSION_JSON="${WL_DIR}/session.json"
CURRENT_ROOM=${WL_DIR}/current_room
REQUEST_URL=${WL_DIR}/_request.txt
RESPONSE_JSON=${WL_DIR}/_response.json

DEFAULT_API="http://127.0.0.1:9091/api"
DEFAULT_WS_API="ws://127.0.0.1:9099/events"
WL_API_KEY="x-wordland-api-key"
WS_MARKER_FILE_DIR="${WL_DIR}/_ws"
DEBUG_LOGFILE=/tmp/wordland-debug.log

function die {
  if [[ -z "${SCRIPT}" ]] ; then
    echo 1>&2 "${1}"
  else
    echo 1>&2 "${SCRIPT}: ${1}"
  fi
  exit 1
}

function unquote {
  echo "${@}" | sed -e 's/\\n/\n/g' | sed -e 's/\\"/\"/g' | sed -e 's/]"/]/g' | sed -e 's/"\[/\[/g'
}

function error {
  NO_NEWLINE=""
  if [[ ${1} == "-n" ]] ; then
    NO_NEWLINE="-n"
    shift
  fi
  RED='\033[38;5;9m'
  NC='\033[0m' # No Color
  echo 1>&2 -e ${NO_NEWLINE} "\n${RED}${@}${NC}"
}

function error_stdout {
  RED='\033[38;5;9m'
  NC='\033[0m' # No Color
  echo -e -n "\n${RED}${@}${NC}"
}

function env_val {
  param="${1}"
  if [[ -f ${ENV_FILE} ]] ; then
    val=$(cat ${ENV_FILE} | grep "export ${param}=" | awk -F '=' '{print $2}')
  else
    val=""
  fi
  if [[ -z "${val}" ]] ; then
    echo "${2}"
  else
    echo "${val}"
  fi
}

function maybe_verbose {
  if [[ ! -z "${WL_VERBOSE_ERRORS}" && "${WL_VERBOSE_ERRORS}" == "Y" ]] ; then
    echo "${@}"
  else
    echo "${@}" | awk '{$1=$1;print}' | tr -d '\n'
  fi
}

function debug {
  echo "${@}" >> ${DEBUG_LOGFILE}
}

function json_node {
  if [[ ! -z "${WL_VERBOSE_ERRORS}" && "${WL_VERBOSE_ERRORS}" == "Y" ]] ; then
    echo "${1}" | jq .${2}
  else
    echo "${1}" | jq .${2} 2> /dev/null
  fi
}
function json_val {
  json_node "${1}" "${2}" | tr -d '" '
}
function json_find {
  json="${1}"
  field="${2}"
  match="${3}"
  value="${4}"
  echo "${1}" | jq '.[] | select(.'${field}' == "'${match}'") | .'${value}'' | head -1 | tr -d '"'
}

function session_val {
  if [[ -f ${SESSION_JSON} ]] ; then
    json_val "$(cat ${SESSION_JSON})" "${1}"
  fi
}
function session_player {
  session_val id
}
function session_apiToken {
  session_val apiToken
}
function session_name {
  session_val name
}
function session_email {
  session_val email
}

function current_room {
  if [[ -f ${CURRENT_ROOM} && "$(cat ${CURRENT_ROOM}) | tr -d ' \n'" != "null" ]] ; then
    cat ${CURRENT_ROOM}
  fi
}

function lang {
  echo "${LANG}" | awk -F '_' '{print $1}'| tr '[:upper:]' '[:lower:]'
}

function lang_pack_msg {
  LANG_PACK="${1}"
  msg_key="${2}"
  echo "$(. ${LANG_PACK} && echo "${!msg_key}")"
}

function translate_message {
  LANG_PACK="${WL_DIR}/messages.$(lang).txt"
  if [[ -f ${LANG_PACK} ]] ; then
    message="$(lang_pack_msg ${LANG_PACK} ${@})"
    if [[ ! -z "${message}" ]] ; then
      echo "${message}"
      return
    fi
  fi
  LOCAL_LANG_PACK="${SCRIPT_DIR}/lang/messages.$(lang).txt"
  if [[ -f ${LOCAL_LANG_PACK} ]] ; then
    message="$(lang_pack_msg ${LOCAL_LANG_PACK} ${@})"
    if [[ ! -z "${message}" ]] ; then
      echo "${message}"
      return
    fi
  fi
  DEFAULT_LANG_PACK="${SCRIPT_DIR}/lang/messages.en.txt"
  if [[ -f ${DEFAULT_LANG_PACK} ]] ; then
    message="$(lang_pack_msg ${DEFAULT_LANG_PACK} ${@})"
    if [[ ! -z "${message}" ]] ; then
      echo "${message}"
      return
    fi
  fi

  echo "??? ${@}"
}

function translate_messages {
  for err in ${@} ; do
    translate_message "${err}"
  done
}

function validation_errors {
  translate_messages "$(echo "${1}" | jq '.[].messageTemplate' | tr '.' '_' | tr -d '"')"
}

function wl_api_host {
  echo "${WL_API}" | awk -F[/:] '{print $4}'
}

function wl_prompt {
  name="$(session_name)"
  if [[ -z "${name}" ]] ; then
    name="not-signed-on"
  fi
  room="$(current_room)"
  if [[ ! -z "${WL_VERBOSE_PROMPT}" && "${WL_VERBOSE_PROMPT}" == "Y" ]] ; then
    if [[ ! -z "${room}" ]] ; then
      room="/${room}"
    fi
    echo "${name}@$(wl_api_host)${room}>>> "
  else
    if [[ ! -z "${room}" ]] ; then
    room="@${room}"
    fi
    echo "${name}${room}>>> "
  fi
}

function room_prompt {
  name="$(session_name)"
  if [[ -z "${name}" ]] ; then
    name="not-signed-on"
  fi
  if [[ ! -z "${WL_VERBOSE_PROMPT}" && "${WL_VERBOSE_PROMPT}" == "Y" ]] ; then
    echo "$(session_name)@$(wl_api_host)/$(translate_message msg_room_prompt_rooms)>>> "
  else
    echo "$(session_name)/$(translate_message msg_room_prompt_rooms)>>> "
  fi
}
function http_code {
 code="${1}"
 if [[ ! -z "${code}" && ! "${code}" =~ [A-Za-z] ]] ; then
   echo "${code}"
 else
   echo "0"
 fi
}

function session_header {
  if [[ -z "${SESSION_TOKEN}" ]] ; then
    error "$(translate_message err_api_noSessionId)"
  fi
  echo "${SESSION_TOKEN}"
}

function wl_exists {
  URL="${1}"
  response=$(curl --silent --write-out "\n%{http_code}\n" --header "$(session_header)" ${URL})
  status_code=$(echo "${response}" | sed -n '$p')
  if [[ $(http_code ${status_code}) -ne 200 ]] ; then
    echo "false"
  else
    echo "true"
  fi
}

function wl_get {
  URL="${1}"
  OUTFILE="${2}"
  ALLOWED_CODES="${3:-"200"}"

  echo "${URL}" > ${REQUEST_URL}
  response=$(curl --silent --write-out "\n%{http_code}\n" --header "$(session_header)" ${URL})
  status_code=$(echo "${response}" | sed -n '$p')
  if [[ ! -z "${OUTFILE}" ]] ; then
    json=$(echo "${response}" | sed '$d' | tee ${OUTFILE} | ${RESPONSE_JSON})
  else
    json=$(echo "${response}" | sed '$d' | tee ${RESPONSE_JSON})
  fi

  http_code=$(http_code ${status_code})
  for code in ${ALLOWED_CODES} ; do
    if [[ "${code}" == "${http_code}" ]] ; then
      if [[ ! -z "${OUTFILE}" && -f "${OUTFILE}" ]] ; then
        echo "${http_code}"
      else
        echo "${json}"
      fi
      return
    fi
  done
  die "wl_get(${URL}): ${status_code}$(if [[ ! -z "${json}" ]] ; then echo ; echo "$(maybe_verbose "${json}")" ; fi)"
}

function wl_post {
  URL="${1}"
  DATA="${2}"
  OUTFILE="${3:-/dev/null}"
  ALLOWED_CODES="${4:-"200"}"

  echo "${URL}" > ${REQUEST_URL}
  response=$(echo "${DATA}" | curl --silent --write-out "\n%{http_code}\n" --header "Content-Type: application/json" --header "$(session_header)" -X POST -d @- ${URL})
  status_code=$(echo "${response}" | sed -n '$p')
  json=$(echo "${response}" | sed '$d' | tee ${RESPONSE_JSON} | tee ${OUTFILE})

  http_code=$(http_code ${status_code})
  for code in ${ALLOWED_CODES} ; do
    if [[ "${code}" == "${http_code}" ]] ; then
      if [[ -z "${OUTFILE}" || "${OUTFILE}" == "/dev/null" ]] ; then
        echo "$(cat ${RESPONSE_JSON})"
      else
        echo "${http_code}"
      fi
      return
    fi
  done
  die "wl_post(${URL}): ${status_code}$(if [[ ! -z "${json}" ]] ; then echo ; echo "$(maybe_verbose "${json}")" ; fi)"
}

mkdir -p ${WL_DIR} || die "$(translate_message err_mkdir): ${WL_DIR}"

if [ -f ${ENV_FILE} ] ; then
  . ${ENV_FILE}
fi

if [ -z "${WL_API}" ] ; then
  WL_API="$(env_val WL_API ${DEFAULT_API})"
fi
if [ -z "${WL_WS_API}" ] ; then
  WL_WS_API="$(env_val WL_WS_API ${DEFAULT_WS_API})"
fi

# check API availability
response=$(curl --silent --write-out "\n%{http_code}\n" ${WL_API}/auth/ping)
status_code=$(echo "${response}" | sed -n '$p')
if [[ -z "${status_code}" || ${status_code} -ne 200 ]] ; then
  die "$(translate_message err_api_unavailable): ${WL_API}"
fi
