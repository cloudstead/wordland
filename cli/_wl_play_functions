#!/bin/bash
SCRIPT="${0}"
SCRIPT_DIR=$(cd $(dirname ${SCRIPT}) && pwd)
. ${SCRIPT_DIR}/_wl_common

ACTIVE_CHAR=""
ACTIVE_CHAR_INDEX=1
ACTIVE_TRAY_INDEX=1
TILES=()
LETTERS=()
INDEXES=()

function init_play {
  ROOM_DIR=$(room_dir ${ROOM_NAME})
  WEBSOCKET_FILE="$(room_web_socket "${ROOM_NAME}")"
  ROOM_API="${WL_API}/rooms/${ROOM_NAME}"

  X1="$(cat "${ROOM_DIR}/x1")"
  if [[ -z "${X1}" ]] ; then
    X1=0 ; echo "${X1}" > ${ROOM_DIR}/x1
  fi
  Y1=$(cat ${ROOM_DIR}/y1)
  if [[ -z "${Y1}" ]] ; then
    Y1=0 ; echo "${Y1}" > ${ROOM_DIR}/y1
  fi
  VIEW_SIZE=$(cat ${ROOM_DIR}/view_size)
  ROOM_PALETTE=${ROOM_DIR}/palette.json
  BOARD_JSON=${ROOM_DIR}/board.json
  PLAY_JSON=${ROOM_DIR}/play.json
}

function debug_tray {
  echo -n "--------- ${1} --- $(date "+%Y-%m-%d %H:%M:%S") -------------------------
ACTIVE_CHAR=${ACTIVE_CHAR}
ACTIVE_CHAR_INDEX=${ACTIVE_CHAR_INDEX}
ACTIVE_TRAY_INDEX=${ACTIVE_TRAY_INDEX}
$(printf '%s\n' "TILES=${TILES[@]}" | tr '\n' '|')
$(printf '%s\n' "LETTERS=${LETTERS[@]}" | tr '\n' '|')
$(printf '%s\n' "INDEXES=${INDEXES[@]}" | tr '\n' '|')
$(printf '%s\n' "current_word=$(current_word)")
$(printf '%s\n' "current_word_length=$(current_word_length)")
" >> /tmp/tray.$(whoami).log
}

function reset_play {
  unset TILES
  TILES=()
  unset LETTERS
  LETTERS=()
  unset INDEXES
  INDEXES=()
  ACTIVE_CHAR=""
  ACTIVE_CHAR_INDEX=1
  ACTIVE_TRAY_INDEX=1
}

function current_word {
  for c in "${LETTERS[@]}" ; do
    echo -n "${c}" | tr '[:lower:]' '[:upper:]'
  done
}
function current_word_length {
  echo -n $(current_word) | wc -c | tr -d ' '
}

function subtract_letter {
  if [[ -z "$(current_word)" ]] ; then
    return
  fi

  LETTER_INDEX=$(expr ${ACTIVE_TRAY_INDEX} - 1)
  if [[ ${LETTER_INDEX} -lt 0 ]] ; then
    # should never happen
    return
  fi
  if [[ ${ACTIVE_TRAY_INDEX} -le 0 ]] ; then
    ACTIVE_TRAY_INDEX=1
  fi

  # debug "start subtract_letter: letters=${LETTERS[@]} / LETTER_INDEX=${LETTER_INDEX}, ACTIVE_TRAY_INDEX=${ACTIVE_TRAY_INDEX}"

  unset 'TILES[${LETTER_INDEX}]'
  unset 'LETTERS[${LETTER_INDEX}]'
  unset 'INDEXES[${LETTER_INDEX}]'
  TILES=( "${TILES[@]:0:${LETTER_INDEX}}" "${TILES[@]:${LETTER_INDEX}}" )
  LETTERS=( "${LETTERS[@]:0:${LETTER_INDEX}}" "${LETTERS[@]:${LETTER_INDEX}}" )
  INDEXES=( "${INDEXES[@]:0:${LETTER_INDEX}}" "${INDEXES[@]:${LETTER_INDEX}}" )

#  ACTIVE_CHAR="$(echo $(current_word) | head -c $(expr ${ACTIVE_CHAR_INDEX} + 1) | tail -c 1)"
  ACTIVE_CHAR="${LETTERS[${LETTER_INDEX}]}"
  ACTIVE_CHAR_INDEX="${INDEXES[${LETTER_INDEX}]}"
  # debug "end subtract_letter: letters=${LETTERS[@]} / LETTER_INDEX=${LETTER_INDEX}, ACTIVE_TRAY_INDEX=${ACTIVE_TRAY_INDEX}, AC=${ACTIVE_CHAR}, should be ${LETTERS[${LETTER_INDEX}]}, L0=${LETTERS[0]}, L1=${LETTERS[1]}, L2=${LETTERS[2]}"
}

function play_obj {
  if [[ ! -z ${CURRENT_PLAY} && ${#LETTERS[@]} -gt 0 ]] ; then
    cat <<EOF
  {
    "room": "${ROOM_NAME}",
    "stateChange": "word_played",
    "id": "$(session_player)",
    "clientId": "$(session_player)",
    "apiToken": "$(session_apiToken)",
    "word": "$(current_word)",
    "tiles": ${CURRENT_PLAY}
  }
EOF
  else
    error "no valid word to play"
  fi
}

BOARD_REQUEST_PREFIX="{ \"palette\": "
BOARD_REQUEST_TILES_JSON_PREFIX=", \"tiles\": [ "
BOARD_REQUEST_TILES_JSON_SEP=", "
BOARD_REQUEST_JSON_SUFFIX=" ] }"

function board_preview_obj {
  echo -n "${BOARD_REQUEST_PREFIX}"
  if [[ -f ${ROOM_PALETTE} && $(cat ${ROOM_PALETTE} | tr -d ' \n' | wc -c | tr -d ' ') -gt 0 ]] ; then
    cat ${ROOM_PALETTE}
  else
    echo -n "null"
  fi
  echo -n "${BOARD_REQUEST_TILES_JSON_PREFIX}"
  first=1
  for tile in "${TILES[@]}" ; do
    if [[ "${tile}" =~ /null/ ]] ; then
      break
    fi
    if [[ -z "$(echo -n ${tile} | tr -d ' ')" ]] ; then
      continue
    fi
    if [ ${first} -ne 1 ] ; then
      echo -n "${BOARD_REQUEST_TILES_JSON_SEP}"
    fi
    echo -n " { ${tile} }"
    first=0
  done
  echo -n "${BOARD_REQUEST_JSON_SUFFIX}"
}

function save_room_state {
  PALETTE="$(json_node "$(cat ${BOARD_JSON})" palette)"
  if [[ ! -z "${PALETTE}" ]] ; then
    echo "${PALETTE}" > ${ROOM_PALETTE}
  fi
  X1="$(json_val "$(cat ${BOARD_JSON})" x1)"
  X2="$(json_val "$(cat ${BOARD_JSON})" x2)"
  Y1="$(json_val "$(cat ${BOARD_JSON})" y1)"
  Y2="$(json_val "$(cat ${BOARD_JSON})" y2)"
  if [[ ! -z "${X1}" ]] ; then echo "${X1}" > ${ROOM_DIR}/x1 ; fi
  if [[ ! -z "${X2}" ]] ; then echo "${X2}" > ${ROOM_DIR}/x2 ; fi
  if [[ ! -z "${Y1}" ]] ; then echo "${Y1}" > ${ROOM_DIR}/y1 ; fi
  if [[ ! -z "${Y2}" ]] ; then echo "${Y2}" > ${ROOM_DIR}/y2 ; fi
}

function show_tray {
  echo
  if [[ -z "$(current_word)" ]] ; then
    echo "   [  (empty)  ]"
    echo
  else
    echo "   [  $(current_word)  ]"
    echo -n "     "
    i=0
    while [[ ${i} -lt ${ACTIVE_TRAY_INDEX} ]] ; do
      echo -n " "
      i=$(expr ${i} + 1)
    done
    echo "^"
  fi
}

function show_board {
  if [[ -f ${BOARD_JSON} ]] ; then
    if [[ ! -z "${USE_CACHED_BOARD}" && USE_CACHED_BOARD -eq 1 ]] ; then
      board="$(json_node "$(cat ${BOARD_JSON})" grid)"
      echo ; printf "$(printf "${board}" | tr -d '"')"
      return
    else
      cp ${BOARD_JSON} ${BOARD_JSON}.bak
    fi
  fi
  USE_CACHED_BOARD=0

  # debug $(echo "> end: BPO: $(board_preview_obj)" | grep tiles)
  board_status="$(wl_post "${ROOM_API}/board/preview.txt?x1=${X1}&x2=$(expr ${X1} + ${VIEW_SIZE})&y1=${Y1}&y2=$(expr ${Y1} + ${VIEW_SIZE})" "$(board_preview_obj)" "${BOARD_JSON}" "200 422")" \
    || die "$(translate_message err_api_boardView)"
  case $(http_code ${board_status}) in
    200)
      board="$(json_node "$(cat ${BOARD_JSON})" grid)"
      if [[ ! -z "${board}" ]] ; then
        save_room_state
        roomState="$(json_val "$(cat ${BOARD_JSON})" roomState)"
        if [[ ! -z "${roomState}" && "${roomState}" == "ended" ]] ; then
          echo "$(translate_message msg_game_over)"
          winners="$(cat ${BOARD_JSON} | jq -c '.scoreboard[] | select(.winner) | .name' | tr -d '"')"
          if [[ $(echo "${winners}" | wc -l) -gt 1 ]] ; then
            echo "$(translate_message label_winners): ${winners}"
          else
            echo "$(translate_message label_winner): ${winners}"
          fi
        fi
        boardWidth="$(board_width)"
        boardHeight="$(cat ${ROOM_DIR}/room.json | jq .roomSettings.board.settings.height)"
        if [[ -z "${boardWidth}" && -z "${boardHeight}" ]] ; then
          echo "(${X1}, ${Y1}) - (${X2}, ${Y2})"
        elif [[ -z "${boardWidth}" ]] ; then
          if [[ ${boardHeight} -ge ${Y2} ]] ; then
            echo "(${Y1}) - (${Y2})"
          else
            echo
          fi
        elif [[ -z "${boardHeight}" ]] ; then
          if [[ ${boardWidth} -ge ${X2} ]] ; then
            echo "(${X1}) - (${X2})"
          else
            echo
          fi
        else
          echo
        fi
        printf "$(printf "${board}" | tr -d '"')"
      fi
    ;;
    422)
      error "$(validation_errors "${BOARD_JSON}")"
      if [[ -f ${BOARD_JSON}.bak ]] ; then
        cp ${BOARD_JSON}.bak ${BOARD_JSON}
      fi
    ;;
    *)
      die "$(translate_message err_api_boardView)"
    ;;
  esac

  if [[ ${#TILES[*]} -gt 0 ]] ; then
    SUCCESS="$(json_val "$(cat ${BOARD_JSON})" success)"
    if [[ -z "${SUCCESS}" || "${SUCCESS}" != "true" ]] ; then
      error -n "$(translate_message 'err_game_invalidPlay'): $(current_word)"
      CURRENT_PLAY=""
    else
      CURRENT_PLAY="$(json_node "$(cat ${BOARD_JSON})" playedTiles)"
    fi
  fi
}

function player_name {
  player_info=$(wl_get "${ROOM_API}/players/${1}")
  if [[ ! -z "${player_info}" ]] ; then
    echo -n "$(json_val "${player_info}" name)"
  fi
}

function abandon_game {

  echo ; echo ; echo -n "$(translate_message msg_confirm_abandon_game) "
  IFS= read -s -r -n1 char 2> /dev/null
  if [[ $(is_yes "${char}") != "true" ]] ; then
    return
  fi

  LEAVE_JSON=$(mktemp /tmp/$(basename $0).abandon_game.XXXXXXXX.json)
  leave_status="$(wl_post "${ROOM_API}/abandon" "{}" "${LEAVE_JSON}" "200 422")"
  LEAVE_JSON="$(cat "${LEAVE_JSON}")"
  rm -f ${LEAVE_JSON}

  case $(http_code ${leave_status}) in
    200)
      echo ; echo ; echo "$(translate_message msg_game_abandoned)" ; echo
      exec ${SCRIPT_DIR}/wl_rooms
    ;;
    422)
      echo ; echo ; die $(validation_errors "${LEAVE_JSON}")
    ;;
    *)
      echo ; echo ; die "$(translate_message err_api_play)"
    ;;
  esac
}

function fresh_board_view {
  show_board ; echo ; show_tray
  if [[ ! -z "${1}" ]] ; then
    echo -n "${1}"
  else
    echo -n "$(wl_prompt)"
  fi
}

function async_fresh_board_view {
  ANY_PRINTOUTS=0
  while read line ; do
    change="$(json_val "${line}" stateChange)"
    case ${change} in
      player_joined|player_joined_game_started)
        playerId="$(json_val "${line}" object.id)"
        if [[ ! -z "${playerId}" && "${playerId}" == "$(session_player)" ]] ; then
          : # if this was ourselves, don't print anything
        else
          if [[ ${ANY_PRINTOUTS} -eq 0 ]] ; then echo ; echo ; fi
          echo "$(json_val "${line}" object.name) $(translate_message msg_has_joined_the_game)"
          ANY_PRINTOUTS=1
        fi
        ;;
      player_left|player_left_game_ended)
      if [[ ${ANY_PRINTOUTS} -eq 0 ]] ; then echo ; echo ; fi
        echo "$(player_name $(json_val "${line}" object)) $(translate_message msg_has_abandoned_the_game)"
        ANY_PRINTOUTS=1
        ;;
      word_played|word_played_game_ended)
        playerId="$(json_val "${line}" object.id)"
        if [[ ! -z "${playerId}" && "${playerId}" == "$(session_player)" ]] ; then
          : # if this was ourselves, don't print anything
        else
          if [[ ${ANY_PRINTOUTS} -eq 0 ]] ; then echo ; echo ; fi
          echo "$(player_name $(json_val "${line}" object.id)) $(translate_message msg_played_word) $(json_val "${line}" object.word)"
          ANY_PRINTOUTS=1
        fi
        ;;
      *)
        echo "unrecognized async update (${change}) ~~~~  : ${line}"
        ;;
    esac
    if [[ ${change} =~ /_game_ended/ ]] ; then
      if [[ ${ANY_PRINTOUTS} -eq 0 ]] ; then echo ; echo ; fi
      echo "Game Over"
      ANY_PRINTOUTS=1
    fi
  done < ${1}
  if [[ ${ANY_PRINTOUTS} -eq 1 ]] ; then
    echo ; fresh_board_view
  fi
}

function show_rooms {
  rooms_json=$(wl_get ${WL_API}/me/rooms)
  i=1
  #echo "${rooms_json}" >> /tmp/rooms.json
  for room in $(echo "${rooms_json}" | jq '.[] | .name' | tr -d '"') ; do
    roomState=$(json_find "${rooms_json}" name "${room}" roomState)
    echo "${i} - ${room} - $(translate_message msg_room_state_${roomState})"
    i=$(expr ${i} + 1)
  done
  echo "n - New Game"
  echo "q - Back to Current Game"
  echo ; echo -n "$(room_prompt)"
  while IFS= read line 2> /dev/null ; do
    if [[ ! -z "${line}" ]] ; then
      case ${line} in
        q|Q)
          return
        ;;
        n|N)
          echo ; echo ; exec ${SCRIPT_DIR}/wl_rooms
        ;;
        (*[!0-9]*)
          echo ; echo -n "$(room_prompt)"
          continue
        ;;
        *)
          # all digits, must be room number
          line=$(echo "${line}" | tr -d ' \n')
          if [[ -z "${line}" ]] ; then
            break
          fi
          roomName=$(echo "${rooms_json}" | jq '.['$(expr ${line} - 1)'] | .name' | tr -d '"')
          if [[ $(wl_exists "${WL_API}/rooms/${roomName}") == "true" ]] ; then
            exec ${SCRIPT_DIR}/wl_join "${roomName}"
          else
            error "$(translate_message err_room_notFound)"
          fi
        ;;
      esac
    fi
    echo ; echo -n "$(room_prompt)"
  done
}

function show_plays {
  plays_json=$(wl_get "${ROOM_API}/plays")
  if [[ ! -z "${plays_json}" ]] ; then
    while read play ; do
#      echo "saw this play: ${play}, by $(echo "${play}" | jq .player.name)"
      echo "$(json_val "${play}" player.name) $(translate_message msg_played_word) $(json_val "${play}" word)"
      if [[ ! -z "${1}" && "${1}" == "in_detail" ]] ; then
        while read score ; do
          scoreType="$(json_val "${score}" type)"
          if [[ -z "${scoreType}" ]] ; then
            continue
          fi
          echo -n "  $(translate_message msg_play_detail_score_${scoreType})"
          case ${scoreType} in
            symbol)
              echo "$(json_val "${score}" info.symbol) @ $(json_val "${score}" info.x)x$(json_val "${score}" info.y): $(json_val "${score}" picas) $(translate_message label_picas)"
            ;;
            word)
              echo "$(json_val "${score}" info.word): $(json_val "${score}" picas) $(translate_message label_picas)"
            ;;
            board)
              echo "$(translate_message label_board_score_$(json_val "${score}" info.name)): $(player_name $(json_val "${score}" player)): $(json_val "${score}" picas) $(translate_message label_picas)"
            ;;
          esac

        done <<<"$(echo "${play}" | jq -c '.score.scores[]')"
      fi
      if [[ ! -z "${1}" && "${1}" == "in_detail" ]] ; then
        echo
      fi
    done <<<"$(echo "${plays_json}" | jq -c '.[]')"
  fi
}

function move_board_prompt {
  echo -n "$(translate_message msg_move_board_prompt)>>> "
}

function board_width {
  if [[ -f "${ROOM_DIR}/room.json" ]] ; then
    echo "$(cat ${ROOM_DIR}/room.json | jq .roomSettings.board.settings.width)"
  fi
}

function board_height {
  if [[ -f "${ROOM_DIR}/room.json" ]] ; then
    echo "$(cat ${ROOM_DIR}/room.json | jq .roomSettings.board.settings.height)"
  fi
}

function move_board {
  if [[ ! -z "$(board_width)" || $(board_width) -gt 10 ]] ; then
    deltaX=$(expr ${VIEW_SIZE} / 4)
  else
    deltaX=1
  fi
  if [[ ! -z "$(board_height)" || $(board_height) -gt 10 ]] ; then
    deltaY=$(expr ${VIEW_SIZE} / 4)
  else
    deltaY=1
  fi
  # debug "move_board: starting with x1=${X1}, y1=${Y1}"
  echo ; echo -n "$(move_board_prompt)"

  while [ 1 ] ; do
    while IFS= read -s -r -t 2 -n1 char 2> /dev/null ; do
      case $(echo ${char} | tr '[:upper:]' '[:lower:]') in
        q)
          echo ; echo "$(translate_message msg_move_board_updated) ${X1},${Y1} - ${X2},${Y2}"
          echo ; return
        ;;
        '?')
          lang_file "move_board"
          echo ; echo -n "$(move_board_prompt)"
          continue
        ;;
        $(translate_message label_move_board_up))
          # echo "move_board: moving up (W)"
          X1=$(expr ${X1} - ${deltaX})
          X2=$(expr ${X2} - ${deltaX})
        ;;
        $(translate_message label_move_board_left))
          # echo "move_board: moving left (A)"
          Y1=$(expr ${Y1} - ${deltaY})
          Y2=$(expr ${Y2} - ${deltaY})
        ;;
        $(translate_message label_move_board_down))
          # echo "move_board: moving down (S)"
          X1=$(expr ${X1} + ${deltaX})
          X2=$(expr ${X2} + ${deltaX})
        ;;
        $(translate_message label_move_board_right))
          # echo "move_board: moving right (D)"
          Y1=$(expr ${Y1} + ${deltaY})
          Y2=$(expr ${Y2} + ${deltaY})
        ;;
        *)
          continue
        ;;
      esac
      # debug "move_board: ending with x1=${X1}, y1=${Y1}"
      echo "${X1}" > ${ROOM_DIR}/x1
      echo "${X2}" > ${ROOM_DIR}/x2
      echo "${Y1}" > ${ROOM_DIR}/y1
      echo "${Y2}" > ${ROOM_DIR}/y2
      reset_play
      echo ; echo "$(translate_message msg_move_board_updated): (${X1}, ${Y1}) - (${X2}, ${Y2})"
      fresh_board_view "$(move_board_prompt)"
    done
  done
}

trap "wait" CHLD

function board_image {
  IMAGE_VIEWER="$(image_viewer)"
  if [[ -z "${IMAGE_VIEWER}" ]] ; then
    error "$(translate_message err_imageViewer_notFound): ${png_file}"
    return
  fi

  # send X1/X2/Y1/Y2 that are all equally larger than the current screen view
  viewX1=$(expr ${X1} - 125)
  viewX2=$(expr ${X1} + 125)
  viewY1=$(expr ${Y1} - 125)
  viewY2=$(expr ${Y1} + 125)
  IMAGE_JSON=${ROOM_DIR}/image.json
  if [[ -f ${ROOM_PALETTE} ]] ; then
    board_view_status=$(wl_post "${ROOM_API}/board/view.png?x1=${viewX1}&x2=${viewX2}&y1=${viewY1}&y2=${viewY2}" "$(cat ${ROOM_PALETTE})" ${IMAGE_JSON})
  else
    board_view_status=$(wl_post "${ROOM_API}/board/view.png?x1=${viewX1}&x2=${viewX2}&y1=${viewY1}&y2=${viewY2}" "" ${IMAGE_JSON})
  fi
  IMAGE_JSON="$(cat ${IMAGE_JSON})"
  if [[ -z "${board_view_status}" || "${board_view_status}" -ne 200 || -z "${IMAGE_JSON}" ]] ; then
    error "$(translate_message err_api_boardView_png)"
    return
  fi

  actualX1=$(json_val "${IMAGE_JSON}" x1)
  actualY1=$(json_val "${IMAGE_JSON}" y1)
  actualX2=$(json_val "${IMAGE_JSON}" x2)
  actualY2=$(json_val "${IMAGE_JSON}" y2)
  if [[ -z "${actualX1}" || -z "${actualY1}" || -z "${actualX2}" || -z "${actualY2}" || $(json_val "${IMAGE_JSON}" base64image | wc -c) -lt 100 ]] ; then
    error "$(translate_message err_api_boardView_png)"
    return
  fi

  png_file="$(mktemp /tmp/wordland_${actualX1}x${actualY1}_${actualX2}x${actualY2}_${ROOM_NAME}.XXXXXXXX.png)"
  json_val "${IMAGE_JSON}" base64image | base64 -d > ${png_file}

  set -m
  ${IMAGE_VIEWER} ${png_file} > /dev/null 2> /dev/null &
  echo ; echo "$(translate_message msg_boardView_png) (${actualX1}, ${actualY1}) ... (${actualX2}, ${actualY2}) : ${png_file}" ; echo
}
